import telebot
from data import token
from telebot import types
from telebot.types import InputFile
from collections import defaultdict
import os


class Table:
    def __init__(self, name, path_to_photo):
        self.name = name
        self.path = path_to_photo + ".jpg"


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = {
    'admin': 'admin123',
    'user': 'pass123'
}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = defaultdict(lambda: {'state': None, 'login': None, 'is_admin': False})

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
all_users = set()

bot = telebot.TeleBot(token.__token)


@bot.message_handler(commands=["start"])
def start_message(message):
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users.add(message.chat.id)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    main_menu_button = types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    authorization_button = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if user_states[message.chat.id].get('is_admin'):
        send_message_button = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        markup.add(main_menu_button, authorization_button, send_message_button)
    else:
        markup.add(main_menu_button, authorization_button)

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Timetable!", reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == "–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è")
def auth_callback(message):
    if user_states[message.chat.id].get('is_admin'):
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
        return

    user_states[message.chat.id]['state'] = 'waiting_login'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")


@bot.message_handler(func=lambda message: user_states[message.chat.id]['state'] == 'waiting_login')
def handle_login(message):
    user_states[message.chat.id]['login'] = message.text
    user_states[message.chat.id]['state'] = 'waiting_password'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")


@bot.message_handler(func=lambda message: user_states[message.chat.id]['state'] == 'waiting_password')
def handle_password(message):
    login = user_states[message.chat.id]['login']
    password = message.text


    if login in ADMINS and ADMINS[login] == password:
        user_states[message.chat.id]['is_admin'] = True
        user_states[message.chat.id]['state'] = None

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–æ–π
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        markup.add(types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è"))
        markup.add(types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"))

        bot.send_message(message.chat.id, "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                         reply_markup=markup)
    else:
        user_states[message.chat.id]['state'] = None
        user_states[message.chat.id]['is_admin'] = False
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.")


@bot.message_handler(func=lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
def request_broadcast_message(message):
    if not user_states[message.chat.id].get('is_admin'):
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!")
        return

    user_states[message.chat.id]['state'] = 'waiting_broadcast'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")


@bot.message_handler(func=lambda message: user_states[message.chat.id]['state'] == 'waiting_broadcast')
def send_broadcast(message):
    if not user_states[message.chat.id].get('is_admin'):
        return

    broadcast_message = message.text
    failed_sends = 0

    for user_id in all_users:
        try:
            bot.send_message(user_id, f"üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{broadcast_message}")
        except Exception:
            failed_sends += 1

    user_states[message.chat.id]['state'] = None
    bot.send_message(message.chat.id,
                     f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n–£—Å–ø–µ—à–Ω–æ: {len(all_users) - failed_sends}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed_sends}")


@bot.message_handler(func=lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def show_inline_menu(message):
    inline_menu_markup = types.InlineKeyboardMarkup(row_width=2)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç—Ä–æ–∫–∏
    buttons = []

    for i in range(1, 6):
        buttons.append(types.InlineKeyboardButton(f"{i} –∫—É—Ä—Å", callback_data=f"{i} –∫—É—Ä—Å"))

    for i in range(0, len(buttons), 2):
        row = buttons[i:min(i + 2, len(buttons))]
        inline_menu_markup.row(*row)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=inline_menu_markup)


@bot.callback_query_handler(func=lambda call: call.data.endswith("–∫—É—Ä—Å"))
def callback_query(call):
    selected_course = call.data
    bot.answer_callback_query(call.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_course}")

    course_groups = {
        '1 –∫—É—Ä—Å': ["–ò–¢-0110224", "–ò–¢-0930224", "–ò–¢-0940324", "–ò–¢-1035224",
                   "–ò–¢-1320124", "–ò–¢-1540124", "–ò–¢-2740224", "–ò–¢-4451124"],
        '2 –∫—É—Ä—Å': ["–ò–¢-0110223", "–ò–¢-0115323", "–ò–¢-0320123", "–ò–¢-0930323",
                   "–ò–¢-0930223", "–ò–¢-1035223", "–ò–¢-1320123", "–ò–¢-1540123",
                   "–ò–¢-2740223", "–ò–¢-4450523"],
        '3 –∫—É—Ä—Å': ["–ò–¢-0110222", "–ò–¢-0115322", "–ò–¢-0320122", "–ò–¢-0930222",
                   "–ò–¢-0940322", "–ò–¢-1035222", "–ò–¢-1320122", "–ò–¢-1540122",
                   "–ò–¢-2740122", "–ò–¢-4450522"],
        '4 –∫—É—Ä—Å': ["–ò–¢-0110221", "–ò–¢-0115321", "–ò–¢-0930221", "–ò–¢-0940321",
                   "–ò–¢-1035221", "–ò–¢-1320121", "–ò–¢-1540121", "–ò–¢-2740121",
                   "–ò–¢-4450521"],
        '5 –∫—É—Ä—Å': ["–ò–¢-1035120", "–ò–¢-4450520"]
    }

    if selected_course in course_groups:
        inline_menu_markup = types.InlineKeyboardMarkup(row_width=3)
        groups = course_groups[selected_course]
        buttons = []

        for group in groups:
            buttons.append(types.InlineKeyboardButton(group, callback_data=group))

        for i in range(0, len(buttons), 3):
            row = buttons[i:min(i + 3, len(buttons))]
            inline_menu_markup.row(*row)

        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=inline_menu_markup)


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    if not call.data.endswith("–∫—É—Ä—Å"):
        send_choice(call.message.chat.id, call.data)
        try:

            # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
            project_path = os.path.abspath(os.path.dirname(__file__))

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ data
            data_path = os.path.join(project_path, 'data')

            image = Table(call.data, rf'{data_path}\{call.data}\{call.data}')
            photo = InputFile(image.path)
            bot.send_photo(call.message.chat.id, photo=photo)
        except Exception:
            bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")


def send_choice(chat_id, group_name):
    bot.send_message(chat_id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É {group_name}")


if __name__ == "__main__":
    bot.infinity_polling()
